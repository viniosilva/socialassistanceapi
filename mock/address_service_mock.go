// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/socialassistanceapi/internal/service (interfaces: AddressService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/viniosilva/socialassistanceapi/internal/service"
)

// MockAddressService is a mock of AddressService interface.
type MockAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockAddressServiceMockRecorder
}

// MockAddressServiceMockRecorder is the mock recorder for MockAddressService.
type MockAddressServiceMockRecorder struct {
	mock *MockAddressService
}

// NewMockAddressService creates a new mock instance.
func NewMockAddressService(ctrl *gomock.Controller) *MockAddressService {
	mock := &MockAddressService{ctrl: ctrl}
	mock.recorder = &MockAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressService) EXPECT() *MockAddressServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAddressService) Create(arg0 context.Context, arg1 service.CreateAddressDto) (service.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(service.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAddressServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddressService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockAddressService) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressService)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockAddressService) FindAll(arg0 context.Context) (service.AddressesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].(service.AddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAddressServiceMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAddressService)(nil).FindAll), arg0)
}

// FindOneById mocks base method.
func (m *MockAddressService) FindOneById(arg0 context.Context, arg1 int) (service.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", arg0, arg1)
	ret0, _ := ret[0].(service.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockAddressServiceMockRecorder) FindOneById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockAddressService)(nil).FindOneById), arg0, arg1)
}

// Update mocks base method.
func (m *MockAddressService) Update(arg0 context.Context, arg1 int, arg2 service.UpdateAddressDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressService)(nil).Update), arg0, arg1, arg2)
}
