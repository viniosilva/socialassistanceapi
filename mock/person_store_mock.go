// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/socialassistanceapi/internal/store (interfaces: PersonStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/viniosilva/socialassistanceapi/internal/model"
)

// MockPersonStore is a mock of PersonStore interface.
type MockPersonStore struct {
	ctrl     *gomock.Controller
	recorder *MockPersonStoreMockRecorder
}

// MockPersonStoreMockRecorder is the mock recorder for MockPersonStore.
type MockPersonStoreMockRecorder struct {
	mock *MockPersonStore
}

// NewMockPersonStore creates a new mock instance.
func NewMockPersonStore(ctrl *gomock.Controller) *MockPersonStore {
	mock := &MockPersonStore{ctrl: ctrl}
	mock.recorder = &MockPersonStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonStore) EXPECT() *MockPersonStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonStore) Create(arg0 context.Context, arg1 model.Person) (*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPersonStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPersonStore) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonStore)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockPersonStore) FindAll(arg0 context.Context) ([]model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPersonStoreMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPersonStore)(nil).FindAll), arg0)
}

// FindOneById mocks base method.
func (m *MockPersonStore) FindOneById(arg0 context.Context, arg1 int) (*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", arg0, arg1)
	ret0, _ := ret[0].(*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockPersonStoreMockRecorder) FindOneById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockPersonStore)(nil).FindOneById), arg0, arg1)
}

// Update mocks base method.
func (m *MockPersonStore) Update(arg0 context.Context, arg1 model.Person) (*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonStore)(nil).Update), arg0, arg1)
}
